// Exercise 2: The Button Factory Hell - Why Mixins Matter
// ðŸŽ¯ Learning Goal: Experience repetitive CSS patterns, then solve with LESS mixins

// Import variables from exercise 1 (make sure you completed that first!)
@import "exercise1.less";

/* ========================================
   THE SITUATION: A Design Agency's Nightmare
   ======================================== */

/*
   SCENARIO: You work at "Pixel Perfect Design Agency". Your team has built
   a component library with many button variations for different clients.
   
   Each button follows the same basic pattern (padding, border-radius, font-weight, etc.)
   but with different colors and sizes. The CSS has grown into a monster...
   
   Then your boss says: "Great news! All our clients want their buttons to have 
   rounded corners now - change the border-radius from 4px to 12px on ALL buttons!"
   
   Let's see what you're dealing with...
*/

/* ========================================
   THE CURRENT BUTTON LIBRARY (The Problem)
   ======================================== */

// Here are all the button variations your agency has created.
// Notice the MASSIVE amount of repeated code...

// Primary buttons for different sizes
.btn-primary-small {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  font-size: 0.8rem;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: all 0.2s ease;
  background: @brand-color;
  color: white;
}

.btn-primary-small:hover {
  background: darken(@brand-color, 10%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.btn-primary-medium {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  font-size: 0.9rem;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: all 0.2s ease;
  background: @brand-color;
  color: white;
}

.btn-primary-medium:hover {
  background: darken(@brand-color, 10%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.btn-primary-large {
  padding: 1rem 2rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  font-size: 1.1rem;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: all 0.2s ease;
  background: @brand-color;
  color: white;
}

.btn-primary-large:hover {
  background: darken(@brand-color, 10%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

// Secondary buttons for different sizes
.btn-secondary-small {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  font-size: 0.8rem;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: all 0.2s ease;
  background: #2ecc71; // Green
  color: white;
}

.btn-secondary-small:hover {
  background: darken(#2ecc71, 10%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.btn-secondary-medium {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  font-size: 0.9rem;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: all 0.2s ease;
  background: #2ecc71; // Green
  color: white;
}

.btn-secondary-medium:hover {
  background: darken(#2ecc71, 10%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.btn-secondary-large {
  padding: 1rem 2rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  font-size: 1.1rem;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: all 0.2s ease;
  background: #2ecc71; // Green
  color: white;
}

.btn-secondary-large:hover {
  background: darken(#2ecc71, 10%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

// Danger buttons for different sizes
.btn-danger-small {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  font-size: 0.8rem;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: all 0.2s ease;
  background: #e74c3c; // Red
  color: white;
}

.btn-danger-small:hover {
  background: darken(#e74c3c, 10%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.btn-danger-medium {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  font-size: 0.9rem;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: all 0.2s ease;
  background: #e74c3c; // Red
  color: white;
}

.btn-danger-medium:hover {
  background: darken(#e74c3c, 10%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.btn-danger-large {
  padding: 1rem 2rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  font-size: 1.1rem;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: all 0.2s ease;
  background: #e74c3c; // Red
  color: white;
}

.btn-danger-large:hover {
  background: darken(#e74c3c, 10%);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

/* ========================================
   TASK 2A: THE MAINTENANCE NIGHTMARE (Feel the Pain!)
   ======================================== */

/*
   ðŸŽ¯ TASK: Change border-radius from 4px to 12px on ALL buttons
   
   Instructions:
   1. Go through ALL the button CSS above and change every border-radius 
      from 4px to 12px
   2. Count how many places you had to change (there should be 9)
   3. Run `npm run compile:ex2` and open demo.html to see the result
   4. As you work, imagine if this was a 50-button library instead of 9...
   
   Count how many places you changed: _____ (write your answer here)
   
   Now imagine your boss says: "Actually, let's also add a subtle shadow 
   to ALL buttons: box-shadow: 0 1px 3px rgba(0,0,0,0.1);"
   
   How many more places would you need to update? _____
*/

/* ========================================
   TASK 2B: SPOT THE PATTERN
   ======================================== */

/*
   After making those changes, look closely at the CSS above.
   
   ðŸ’­ REFLECTION QUESTIONS:
   1. What properties are EXACTLY the same across all buttons?
   2. What properties only differ by specific values (like color, padding, font-size)?
   3. What would happen if you needed to add a new button type (like "warning")?
   4. How many lines of code would you need to write for 3 sizes of warning buttons?
   5. What if you had 20 different button types instead of 3?
   
   Look at this pattern:
   - BASE PROPERTIES: border, cursor, font-weight, display, text-align, transition
   - VARIABLE PROPERTIES: padding, font-size, background color
   
   This repetitive pattern is EXACTLY what CSS preprocessor MIXINS solve!
*/

/* ========================================
   TASK 2C: THE SOLUTION - LESS MIXINS
   ======================================== */

/*
   ðŸŽ“ LEARNING TIME: What are Mixins?
   
   Mixins are reusable blocks of CSS that can accept parameters.
   Think of them as "CSS functions" that eliminate repetition.
   
   Instead of writing the same properties over and over, you define them once:
   
   .button-base(@bg-color, @size) {
     border: none;
     cursor: pointer;
     // ... other common properties
     background: @bg-color;
     // size-specific properties based on @size parameter
   }
   
   Then use it like this:
   .btn-primary-small { .button-base(@brand-color, small); }
   
   LESS mixin syntax:
   - Define: .mixin-name(@param1, @param2) { ... }
   - Use: .mixin-name(value1, value2);
   - SCSS is different: @mixin name() and @include name()
*/

// ðŸŽ¯ TASK: Create your button mixin
// TODO: Create a mixin that handles all the repetitive button properties

// .button-base(@bg-color: @brand-color, @text-color: white) {
//   // All the properties that are the same for every button
//   border: none;
//   border-radius: 12px; // Your new rounded corners!
//   cursor: pointer;
//   font-weight: 500;
//   text-decoration: none;
//   display: inline-block;
//   text-align: center;
//   transition: all 0.2s ease;
//   box-shadow: 0 1px 3px rgba(0,0,0,0.1); // Your new shadow!
//   
//   // Variable properties passed as parameters
//   background: @bg-color;
//   color: @text-color;
//   
//   // Hover effect using LESS color function
//   &:hover {
//     background: darken(@bg-color, 10%);
//     transform: translateY(-1px);
//     box-shadow: 0 2px 8px rgba(0,0,0,0.2);
//   }
// }

// ðŸŽ¯ TASK: Create size mixins for different button sizes
// TODO: Create mixins for different sizes

// .button-small() {
//   padding: 0.5rem 1rem;
//   font-size: 0.8rem;
// }
// 
// .button-medium() {
//   padding: 0.75rem 1.5rem;
//   font-size: 0.9rem;
// }
// 
// .button-large() {
//   padding: 1rem 2rem;
//   font-size: 1.1rem;
// }

/* ========================================
   TASK 2D: REFACTOR WITH MIXINS
   ======================================== */

/*
   ðŸŽ¯ TASK: Replace all the repetitive button CSS with your mixins!
   
   Instructions:
   1. First, uncomment the mixins you created above
   2. Then replace ALL the button classes with clean, simple versions using mixins
   3. For example, replace the entire .btn-primary-small class with:
   
   .btn-primary-small {
     .button-base(@brand-color);
     .button-small();
   }
   
   4. Do this for ALL 9 button variations
   5. Run `npm run compile:ex2` to make sure it still works
   
   Compare your new code to the original:
   - Original: ~180 lines of repetitive CSS
   - With mixins: ~30 lines of clean, maintainable code!
*/

/* ========================================
   TASK 2E: TEST THE POWER OF MIXINS
   ======================================== */

/*
   ðŸŽ¯ FINAL TASK: Experience the magic of mixins!
   
   Now that you've refactored everything:
   
   1. Want to change ALL button shadows? Update just the .button-base() mixin!
   2. Want to adjust ALL large button sizes? Update just the .button-large() mixin!
   3. Need a new button type? Just create one line:
      .btn-warning-medium { .button-base(#f39c12); .button-medium(); }
   
   Try this:
   1. Add a new "warning" button color (#f39c12) in one line of code
   2. Change the border-radius in the mixin from 12px to 20px
   3. Run the compiler and see ALL buttons update instantly!
   
   Compare this to Task 2A where you had to find and change 9+ places manually!
*/

/* ========================================
   WHAT YOU LEARNED
   ======================================== */

/*
   âœ… THE PROBLEM: Repetitive CSS patterns
      - Same properties copied across multiple classes
      - Maintenance nightmare when making changes
      - Lots of code duplication
      - Error-prone manual updates
   
   âœ… THE SOLUTION: CSS Preprocessor Mixins
      - Define reusable blocks of CSS with parameters
      - One place to update common properties
      - Much less code to maintain
      - Easy to create new variations
   
   âœ… LESS MIXIN FEATURES YOU USED:
      - Basic mixins: .mixin-name(@param) { ... }
      - Parameters with defaults: (@color: @brand-color)
      - Using mixins: .mixin-name(value);
      - Color functions: darken(), lighten()
   
   ðŸš€ NEXT STEPS: In Exercise 3, you'll see how PARTIALS solve the problem 
   of organizing large stylesheets across multiple files!
*/
