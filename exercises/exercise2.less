// Exercise 2: Mixins & Functions
// ðŸŽ¯ Learning Goal: Master LESS mixins, parameters, and built-in functions
// Import variables from exercise 1
@import "exercise1.less";

/* ========================================
   UNDERSTANDING MIXINS
   ======================================== */

// âœ… What are mixins?
// Mixins are reusable blocks of CSS that can accept parameters
// Think of them as "CSS functions" that help you avoid repetition

// âœ… LESS vs SCSS Mixin Syntax:
// LESS: .mixin-name(@param) { ... } and use with .mixin-name(value);
// SCSS: @mixin mixin-name($param) { ... } and use with @include mixin-name(value);

/* ========================================
   BASIC MIXINS WITH PARAMETERS
   ======================================== */

// TODO: Create the flex-center mixin
// This mixin helps center content with flexbox
// .flex-center(@direction: row) {
//   display: flex;
//   justify-content: center;
//   align-items: center;
//   flex-direction: @direction;
// }

// âœ… Breaking down the syntax:
// .flex-center        - Mixin name (starts with .)
// (@direction: row)   - Parameter with default value
// { ... }             - CSS properties to include

/* ========================================
   ADVANCED MIXINS WITH GUARDS
   ======================================== */

// âœ… What are guards?
// Guards are LESS's version of conditional logic (like SCSS's @if)
// They use "when" to check conditions

// TODO: Create button-style mixin with size variants
// Base mixin that applies common button styles
// .button-style(@bg: @primary, @size: medium) {
//   background: @bg;
//   border: none;
//   border-radius: 4px;
//   cursor: pointer;
//   font-weight: 500;
//   transition: all 0.2s ease;
//
//   // Hover effect using built-in function
//   &:hover {
//     background: darken(@bg, 10%);
//   }
// }

// âœ… Guarded mixins for different sizes
// These mixins have the same name but different conditions
// LESS automatically picks the right one based on the @size parameter

// .button-style(@bg: @primary, @size) when (@size = small) {
//   .button-style(@bg, medium); // Include base styles
//   padding: 0.5rem 1rem;
//   font-size: 0.8rem;
// }
//
// .button-style(@bg: @primary, @size) when (@size = medium) {
//   .button-style(@bg, medium); // Include base styles
//   padding: 0.75rem 1.5rem;
//   font-size: 0.9rem;
// }
//
// .button-style(@bg: @primary, @size) when (@size = large) {
//   .button-style(@bg, medium); // Include base styles
//   padding: 1rem 2rem;
//   font-size: 1.1rem;
// }

// âœ… Alternative approach: One mixin with multiple guards
// .button-padding(@size) when (@size = small) { padding: 0.5rem 1rem; }
// .button-padding(@size) when (@size = medium) { padding: 0.75rem 1.5rem; }
// .button-padding(@size) when (@size = large) { padding: 1rem 2rem; }

/* ========================================
   DEMONSTRATION: USING MIXINS
   ======================================== */

// Demo: Flex center usage
.flex-center-demo {
  // TODO: Use your flex-center mixin here
  // .flex-center(column); // Using the mixin with column direction
  width: 200px;
  height: 100px;
  background: lighten(@primary, 40%);
  border: 2px dashed @primary;
  border-radius: 8px;

  span {
    color: @primary;
    font-weight: bold;
  }
}

// Demo: Multiple flex containers
.flex-demos {
  display: flex;
  gap: 1rem;
  margin: 1rem 0;

  .demo-box {
    width: 150px;
    height: 100px;
    border: 2px solid @secondary;
    border-radius: 4px;

    // TODO: Use your flex-center mixin with different directions
    // &.horizontal { .flex-center(row); }
    // &.vertical { .flex-center(column); }
    // &.reverse { .flex-center(row-reverse); }
  }
}

// Demo: Button style variations using your mixins
// TODO: Create button classes using your mixin
// .btn-styled {
//   .button-style(@primary, medium);
// }
//
// .btn-small {
//   .button-style(@secondary, small);
// }
//
// .btn-large {
//   .button-style(@danger, large);
// }
//
// // Demo: Custom styled buttons
// .btn-custom-1 {
//   .button-style(mix(@primary, @secondary, 50%), medium);
// }
//
// .btn-custom-2 {
//   .button-style(fade(@danger, 80%), large);
// }

/* ========================================
   LESS BUILT-IN FUNCTIONS
   ======================================== */

// âœ… Color Functions in LESS
// LESS provides powerful functions to manipulate colors
// These help create consistent color schemes automatically

// Demo: LESS Color Functions
.color-functions-demo {
  display: flex;
  gap: 1rem;
  margin: 2rem 0;
  flex-wrap: wrap;

  .color-sample {
    width: 120px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 11px;
    font-weight: bold;
    color: white;
    text-align: center;
    border-radius: 8px;
    position: relative;

    &::after {
      content: attr(data-function);
      position: absolute;
      bottom: 5px;
      font-size: 9px;
      opacity: 0.8;
    }
  }

  // TODO: Experiment with LESS color functions
  .original {
    background: @primary;
    &::after { content: "original"; }
  }

  // TODO: Uncomment these to see color functions in action
  // .lightened {
  //   background: lighten(@primary, 20%);
  //   &::after { content: "lighten 20%"; }
  // }
  //
  // .darkened {
  //   background: darken(@primary, 20%);
  //   &::after { content: "darken 20%"; }
  // }
  //
  // .saturated {
  //   background: saturate(@primary, 30%);
  //   &::after { content: "saturate 30%"; }
  // }
  //
  // .desaturated {
  //   background: desaturate(@primary, 30%);
  //   &::after { content: "desaturate 30%"; }
  // }
  //
  // .faded {
  //   background: fade(@primary, 50%);
  //   color: @dark;
  //   &::after { content: "fade 50%"; color: @dark; }
  // }
  //
  // .mixed {
  //   background: mix(@primary, @secondary, 60%);
  //   &::after { content: "mix 60%"; }
  // }
  //
  // .spun {
  //   background: spin(@primary, 60);
  //   &::after { content: "spin 60Â°"; }
  // }
}

/* ========================================
   FUNCTION REFERENCE GUIDE
   ======================================== */

// âœ… Essential LESS Color Functions:
//
// LIGHTNESS:
// lighten(@color, 10%)     - Make color lighter
// darken(@color, 10%)      - Make color darker
//
// SATURATION:
// saturate(@color, 20%)    - Increase color intensity
// desaturate(@color, 20%)  - Decrease color intensity
//
// TRANSPARENCY:
// fade(@color, 50%)        - Add transparency (like rgba)
// fadein(@color, 10%)      - Remove transparency
// fadeout(@color, 10%)     - Add transparency
//
// MIXING:
// mix(@color1, @color2, 50%) - Blend two colors
//
// HUE:
// spin(@color, 30)         - Rotate hue by degrees
//
// EXTRACTION:
// hue(@color)              - Get hue value
// saturation(@color)       - Get saturation value
// lightness(@color)        - Get lightness value

/* ========================================
   PRACTICAL MIXIN EXAMPLES
   ======================================== */

// âœ… Advanced Mixin: Gradient Background
// .gradient-bg(@start: @primary, @end: @secondary, @direction: to bottom) {
//   background: @start; // Fallback for old browsers
//   background: linear-gradient(@direction, @start, @end);
// }
//
// // âœ… Advanced Mixin: Card with Shadow
// .card-style(@padding: 1rem, @shadow: true) {
//   padding: @padding;
//   border-radius: 8px;
//   background: white;
//
//   & when (@shadow = true) {
//     box-shadow: 0 2px 10px fade(black, 10%);
//   }
//
//   & when (@shadow = false) {
//     border: 1px solid @light;
//   }
// }
//
// // Demo: Using advanced mixins
// .gradient-demo {
//   .gradient-bg(@primary, @secondary, to right);
//   height: 100px;
//   .flex-center();
//   color: white;
//   font-weight: bold;
//   margin: 1rem 0;
// }
//
// .card-demo {
//   .card-style(2rem, true);
//   margin: 1rem 0;
//
//   h4 {
//     margin: 0 0 1rem 0;
//     color: @primary;
//   }
// }
