// Exercise 4: Mini Project - Theme Switcher Component
// ðŸŽ¯ Learning Goal: Build a comprehensive component using ALL LESS features
// Your mission: Create a card component that showcases every LESS concept!

@import "exercise1.less";

/* ========================================
   ADVANCED THEME SYSTEM
   ======================================== */

// âœ… What you'll build:
// - A card component with multiple themes (light/dark/colorful)
// - Size variants (compact/default/comfortable)
// - Context-aware styling using parent selectors
// - Responsive behavior with detached rulesets
// - Dynamic colors using LESS functions

// TODO: Create advanced theme variables
// These extend your basic theme with semantic color meanings
// @light-bg: #ffffff;                    // Light theme background
// @light-text: @dark;                    // Light theme text color
// @light-border: #ecf0f1;               // Light theme border
// @light-shadow: rgba(0,0,0,0.1);       // Subtle shadow for light theme

// @dark-bg: @dark;                      // Dark theme background
// @dark-text: #ffffff;                  // Dark theme text color
// @dark-border: lighten(@dark, 20%);    // Lighter border for dark theme
// @dark-shadow: rgba(0,0,0,0.3);        // Stronger shadow for dark theme

/* ========================================
   GUARDED MIXINS - THEME SYSTEM
   ======================================== */

// âœ… Understanding Guarded Mixins:
// Multiple mixins with the same name that activate based on conditions
// LESS automatically picks the right one - this is pattern matching!

// TODO: Create a comprehensive theme mixin using guarded mixins
// This is where LESS really shines - multiple mixins with the same name!
// .theme-style(@theme) when (@theme = light) {
//   background: @light-bg;
//   color: @light-text;
//   border: 1px solid @light-border;
//   box-shadow: 0 2px 10px @light-shadow;
//
//   // Theme-specific text selection
//   &::selection {
//     background: fade(@primary, 20%);
//   }
// }

// .theme-style(@theme) when (@theme = dark) {
//   background: @dark-bg;
//   color: @dark-text;
//   border: 1px solid @dark-border;
//   box-shadow: 0 2px 15px @dark-shadow;
//
//   &::selection {
//     background: fade(@primary, 40%);
//   }
// }

// .theme-style(@theme) when (@theme = colorful) {
//   background: linear-gradient(135deg, @primary, @secondary);
//   color: white;
//   border: none;
//   box-shadow: 0 4px 20px fade(@primary, 40%);
//
//   &::selection {
//     background: fade(white, 30%);
//   }
// }

// âœ… Advanced: Default fallback theme
// .theme-style(@theme) when (default()) {
//   background: @white;
//   color: @dark;
//   border: 1px solid @light;
//   box-shadow: 0 1px 5px fade(black, 5%);
// }

/* ========================================
   SIZE VARIANTS WITH PATTERN MATCHING
   ======================================== */

// âœ… More Guarded Mixins:
// Different size variants for the same component
// Notice how we can affect nested elements too!

// TODO: Create size variants using guarded mixins
// .component-size(@size) when (@size = compact) {
//   padding: 1rem;
//   font-size: 0.9rem;
//
//   h3 { font-size: 1.2em; margin-bottom: 0.5rem; }
//   p { margin-bottom: 1rem; }
//
//   .component-btn {
//     padding: 0.4rem 0.8rem;
//     font-size: 0.8rem;
//   }
// }

// .component-size(@size) when (@size = comfortable) {
//   padding: 2rem;
//   font-size: 1.1rem;
//
//   h3 { font-size: 1.6em; margin-bottom: 1.5rem; }
//   p { margin-bottom: 2rem; }
//
//   .component-btn {
//     padding: 0.8rem 1.6rem;
//     font-size: 1rem;
//   }
// }

// âœ… Default guard - catches any other @size value
// .component-size(@size) when (default()) {
//   padding: 1.5rem;
//   font-size: 1rem;
//
//   h3 { font-size: 1.4em; margin-bottom: 1rem; }
//   p { margin-bottom: 1.5rem; }
//
//   .component-btn {
//     padding: 0.6rem 1.2rem;
//     font-size: 0.9rem;
//   }
// }

/* ========================================
   MAIN COMPONENT IMPLEMENTATION
   ======================================== */

// âœ… Your main component - putting it all together!
.card-component {
  border-radius: 12px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;

  // TODO: Apply your default theme and size
  // .theme-style(light);    // Apply light theme by default
  // .component-size(default); // Apply default size

  // âœ… Advanced hover effects using LESS functions
  &:hover {
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 8px 25px fade(black, 15%);
  }

  // âœ… Pseudo-element decoration
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, @primary, @secondary, @danger);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  &:hover::before {
    opacity: 1;
  }

  // âœ… Animated border using CSS custom properties and LESS
  &::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    padding: 2px;
    background: linear-gradient(45deg, transparent, fade(@primary, 20%), transparent);
    mask: linear-gradient(white 0 0) content-box, linear-gradient(white 0 0);
    mask-composite: subtract;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  &:hover::after {
    opacity: 1;
  }

  h3 {
    margin: 0 0 1rem 0;
    font-size: 1.5em;
    font-weight: 600;
    position: relative;

    // TODO: Add theme-aware color using parent selector
    .light-theme & {
      color: @primary;
    }

    // TODO: Add more theme-aware styling
    // .dark-theme & {
    //   color: lighten(@primary, 20%);
    //
    //   &::after {
    //     background: lighten(@primary, 20%);
    //     opacity: 0.5;
    //   }
    // }

    // âœ… Multiple context selectors
    // .colorful-theme &,
    // .card-component.colorful & {
    //   color: white;
    //   text-shadow: 0 1px 2px fade(black, 30%);
    //
    //   &::after {
    //     background: white;
    //     opacity: 0.6;
    //   }
    // }
  }

  p {
    line-height: 1.6;
    margin-bottom: 1.5rem;
    opacity: 0.8;

    // TODO: Add theme-aware text styling
    // .dark-theme & {
    //   opacity: 0.9; // Better readability in dark theme
    // }

    // .colorful-theme & {
    //   opacity: 1;
    //   font-weight: 500; // Bolder text on gradient backgrounds
    // }
  }

  // âœ… Action button with comprehensive theme awareness
  .component-btn {
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    position: relative;
    overflow: hidden;

    // Default button style
    background: @primary;
    color: white;

    // âœ… Base hover and active states
    &:hover {
      background: darken(@primary, 10%);
      transform: translateY(-1px);
    }

    &:active {
      transform: translateY(0);
    }

    // âœ… Ripple effect using pseudo-element
    &::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border-radius: 50%;
      background: fade(white, 30%);
      transition: width 0.6s, height 0.6s, top 0.6s, left 0.6s;
    }

    &:active::before {
      width: 300px;
      height: 300px;
      top: calc(50% - 150px);
      left: calc(50% - 150px);
    }

    // TODO: Add theme-specific button styles
    // .light-theme & {
    //   box-shadow: 0 2px 8px fade(@primary, 30%);
    //
    //   &:hover {
    //     box-shadow: 0 4px 12px fade(@primary, 40%);
    //   }
    // }

    // .dark-theme & {
    //   background: lighten(@primary, 10%);
    //   box-shadow: 0 2px 12px fade(@primary, 50%);
    //
    //   &:hover {
    //     background: lighten(@primary, 20%);
    //     box-shadow: 0 4px 16px fade(@primary, 60%);
    //   }
    // }

    // .colorful-theme & {
    //   background: fade(white, 20%);
    //   backdrop-filter: blur(10px);
    //   border: 1px solid fade(white, 30%);
    //
    //   &:hover {
    //     background: fade(white, 30%);
    //     border-color: fade(white, 50%);
    //   }
    // }
  }
}

/* ========================================
   CONTEXT-AWARE THEME APPLICATION
   ======================================== */

// âœ… This is where parent selectors really shine!
// The same component looks different based on its container

.light-theme .card-component {
  // TODO: Apply light theme using your mixin
  // .theme-style(light);

  // Additional light theme enhancements
  &:hover {
    // box-shadow: 0 8px 25px @light-shadow;
  }
}

.dark-theme .card-component {
  // TODO: Apply dark theme using your mixin
  // .theme-style(dark);

  // Additional dark theme enhancements
  &:hover {
    // box-shadow: 0 8px 25px fade(black, 40%);
  }
}

// âœ… Bonus: Colorful theme variant
// .colorful-theme .card-component {
//   .theme-style(colorful);
//
//   &:hover {
//     transform: translateY(-4px) scale(1.02) rotate(1deg);
//     box-shadow: 0 12px 35px fade(@primary, 30%);
//   }
// }

/* ========================================
   RESPONSIVE BEHAVIOR
   ======================================== */

// âœ… Mobile-first responsive design with LESS
@media (max-width: 767px) {
  .card-component {
    // TODO: Apply compact size on mobile
    // .component-size(compact);

    // Mobile-specific adjustments
    // border-radius: 8px; // Smaller radius on mobile

    &:hover {
      // transform: translateY(-2px) scale(1.01); // Gentler animation
    }
  }
}

@media (min-width: 1024px) {
  .card-component {
    // TODO: Apply comfortable size on desktop
    // .component-size(comfortable);

    // Desktop-specific enhancements
    &:hover {
      // transform: translateY(-6px) scale(1.03); // More dramatic hover
    }
  }
}

// âœ… Ultra-wide screen adjustments
@media (min-width: 1440px) {
  .card-component {
    max-width: 400px; // Prevent cards from getting too wide

    .component-btn {
      padding: 1rem 2rem;
      font-size: 1.1rem;
    }
  }
}

/* ========================================
   COMPONENT STATES & ANIMATIONS
   ======================================== */

// âœ… Advanced component states using LESS color functions
.card-component {

  // TODO: Add loading state with LESS color functions
  // &.loading {
  //   background: fade(@primary, 10%);
  //   position: relative;
  //   pointer-events: none;
  //
  //   // Animated loading overlay
  //   &::after {
  //     content: '';
  //     position: absolute;
  //     inset: 0;
  //     background: linear-gradient(
  //       90deg,
  //       transparent,
  //       fade(@primary, 5%),
  //       transparent
  //     );
  //     animation: loading-shimmer 1.5s infinite;
  //   }
  //
  //   .component-btn {
  //     background: desaturate(@primary, 50%);
  //     cursor: not-allowed;
  //     opacity: 0.6;
  //
  //     &:hover {
  //       transform: none;
  //       background: desaturate(@primary, 50%);
  //     }
  //   }
  //
  //   h3, p {
  //     opacity: 0.4;
  //   }
  // }

  // TODO: Add success state
  // &.success {
  //   border-color: @secondary;
  //
  //   &::before {
  //     background: @secondary;
  //     opacity: 1;
  //     animation: success-pulse 0.6s ease-out;
  //   }
  //
  //   .component-btn {
  //     background: @secondary;
  //
  //     &:hover {
  //       background: darken(@secondary, 10%);
  //     }
  //   }
  //
  //   h3 {
  //     color: @secondary;
  //   }
  // }

  // TODO: Add error state
  // &.error {
  //   border-color: @danger;
  //   animation: error-shake 0.5s ease-in-out;
  //
  //   &::before {
  //     background: @danger;
  //     opacity: 1;
  //   }
  //
  //   .component-btn {
  //     background: @danger;
  //
  //     &:hover {
  //       background: darken(@danger, 10%);
  //     }
  //   }
  // }

  // TODO: Add disabled state
  // &.disabled {
  //   opacity: 0.5;
  //   pointer-events: none;
  //   filter: grayscale(100%);
  // }
}

/* ========================================
   KEYFRAME ANIMATIONS
   ======================================== */

// âœ… CSS animations for component states
@keyframes loading-shimmer {
  0% { transform: translateX(-100%); }
  100% { transform: translateX(100%); }
}

@keyframes success-pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}

@keyframes error-shake {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-5px); }
  75% { transform: translateX(5px); }
}

/* ========================================
   ACCESSIBILITY ENHANCEMENTS
   ======================================== */

// âœ… Respect user preferences
@media (prefers-reduced-motion: reduce) {
  .card-component {
    transition: none;

    &:hover {
      transform: none;
    }

    &::before,
    &::after,
    .component-btn {
      transition: none;
      animation: none;
    }
  }
}

// âœ… High contrast mode support
@media (prefers-contrast: high) {
  .card-component {
    border-width: 2px;

    .component-btn {
      border: 2px solid currentColor;
    }
  }
}
